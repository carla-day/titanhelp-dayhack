@page "/tickets/{id:int}"
@using Microsoft.EntityFrameworkCore
@inject TitanHelpDesk.Data.ApplicationDbContext Db
@inject NavigationManager Nav

<h3>Ticket Details</h3>

@if (ticket is null)
{
    <p>Loading…</p>
}
else if (notFound)
{
    <div class="alert alert-warning">Ticket not found.</div>
    <NavLink href="/tickets" class="btn btn-secondary">Back</NavLink>
}
else
{
    <div class="card">
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Id</dt>
                <dd class="col-sm-9">@ticket.Id</dd>
                <dt class="col-sm-3">Name</dt>
                <dd class="col-sm-9">@ticket.Name</dd>
                <dt class="col-sm-3">Date</dt>
                <dd class="col-sm-9">@ticket.Date.ToLocalTime():g</dd>
                <dt class="col-sm-3">Priority</dt>
                <dd class="col-sm-9">@ticket.Priority</dd>
                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">@ticket.Status</dd>
                <dt class="col-sm-3">Problem</dt>
                <dd class="col-sm-9">@ticket.ProblemDescription</dd>
            </dl>
            <NavLink href="/tickets" class="btn btn-secondary me-2">Back</NavLink>
            <NavLink href=$"/tickets/@ticket.Id/edit" class="btn btn-primary">Edit</NavLink>
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Ticket? ticket;
    private bool notFound;

    protected override async Task OnInitializedAsync()
    {
        ticket = await Db.Tickets.FirstOrDefaultAsync(t => t.Id == id);
        notFound = ticket is null;
    }
}
