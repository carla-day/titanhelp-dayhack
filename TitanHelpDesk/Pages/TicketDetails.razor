@page "/tickets/{id:int}"
@using Microsoft.EntityFrameworkCore
@inject TitanHelpDesk.Data.ApplicationDbContext Db
@inject NavigationManager Nav

<h3>Ticket Details</h3>

@if (notFound)
{
    <div class="alert alert-warning">Ticket not found.</div>
    <NavLink href="/tickets" class="btn btn-secondary">Back</NavLink>
}
else if (ticket is null)
{
    <p>Loading…</p>
}
else
{
    <dl class="row">
        <dt class="col-sm-3">Id</dt>
        <dd class="col-sm-9">@ticket.Id</dd>

        <dt class="col-sm-3">Name</dt>
        <dd class="col-sm-9">@ticket.Name</dd>

        <dt class="col-sm-3">Date</dt>
        <dd class="col-sm-9">@ticket.Date.ToLocalTime().ToString("g")</dd>

        <dt class="col-sm-3">Priority</dt>
        <dd class="col-sm-9">@ticket.Priority</dd>

        <dt class="col-sm-3">Status</dt>
        <dd class="col-sm-9">@ticket.Status</dd>

        <dt class="col-sm-3">Problem</dt>
        <dd class="col-sm-9">@ticket.ProblemDescription</dd>
    </dl>

    <NavLink href="/tickets" class="btn btn-secondary me-2">Back</NavLink>
    <NavLink class="btn btn-primary" href=@($"/tickets/{ticket.Id}/edit")>Edit</NavLink>
    @* Or with a button:
       <button class="btn btn-primary" @onclick="() => Nav.NavigateTo($"/tickets/{ticket.Id}/edit")">Edit</button>
    *@
}

@code {
    [Parameter] public int id { get; set; }
    private Ticket? ticket;
    private bool notFound;

    protected override async Task OnInitializedAsync()
    {
        ticket = await Db.Tickets.FirstOrDefaultAsync(t => t.Id == id);
        notFound = ticket is null;
    }
}
